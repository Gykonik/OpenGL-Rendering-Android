varying vec2 pass_textureCoordinates;
varying vec3 surfaceNormal;
varying vec3 toLightVector[4];
varying vec3 toCameraVector;
varying float visibility;
varying vec4 shadowCoords;

varying float gl_ClipDistance0;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform sampler2D shadowMap;
uniform float mapSize;

uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

const int pcfCount = 2;
const float pcfCountf = 2.0;

void main(void){
    float totalTexels = (pcfCountf * 2.0 + 1.0) * (pcfCountf * 2.0 + 1.0);
    float texelSize = 1.0 / mapSize;
    float total = 0.0;
    
    for (int x = -pcfCount; x <= pcfCount; x++) {
        for (int y = -pcfCount; y <= pcfCount; y++) {
            float objectNearestLight = texture2D(shadowMap, shadowCoords.xy + vec2(x, y) * texelSize).r;
            if (shadowCoords.z > objectNearestLight + 0.002) {
                total += 1.0;
            }
        }
    }
    
    total /= totalTexels;
    
    // Calculate if the terrain is behind some object.
    float lightFactor = 1.0 - (total * shadowCoords.w);
    
    // Calculate the total texture color used for the mixture of multiple textures.
    vec4 blendMapColour = texture2D(blendMap, pass_textureCoordinates);
    
    float backTextureAmount = 1.0 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
    vec2 tiledCoords = pass_textureCoordinates * 40.0;
    vec4 backgroundTextureColour = texture2D(backgroundTexture, tiledCoords) * backTextureAmount;
    vec4 rTextureColour = texture2D(rTexture, tiledCoords) * blendMapColour.r;
    vec4 gTextureColour = texture2D(gTexture, tiledCoords) * blendMapColour.g;
    vec4 bTextureColour = texture2D(bTexture, tiledCoords) * blendMapColour.b;
    
    vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour; 

    // Normalize toCameraVector, surfaceNormal and toLightVector to make the sum of their elements to 1.
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);
    
    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);
    
    for (int i = 0; i < 4; i++) {
        float distance = length(toLightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        vec3 unitLightVector = normalize(toLightVector[i]);
    
        float nDot1 = dot(unitNormal, unitLightVector);
        float brightness = max(nDot1, 0.0);
        
        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
    
        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor, 0.0);
        float dampedFactor = pow(specularFactor, shineDamper);
        totalDiffuse = totalDiffuse + (brightness * lightColour[i]) / attFactor;
        totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i]) / attFactor;
    }
    totalDiffuse = max(totalDiffuse * lightFactor, 0.4);
    
    // Check to see if vertex is behind the plane if it is less than zero.
    // Then hide it.
    if (gl_ClipDistance0 < 0.0) {
        discard;
    }

	gl_FragColor = vec4(totalDiffuse, 1.0) * totalColour + vec4(totalSpecular, 1.0);
	gl_FragColor = mix(vec4(skyColour, 1.0), gl_FragColor, visibility);
}

/* varying vec2 pass_textureCoordinates;
varying vec3 surfaceNormal;
varying vec3 toLightVector[4];
varying vec3 toCameraVector;
varying float visibility;

varying float gl_ClipDistance0;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){

	vec4 blendMapColour = texture2D(blendMap, pass_textureCoordinates);
	
	float backTextureAmount = 1.0 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	vec2 tiledCoords = pass_textureCoordinates * 30.0;
	vec4 backgroundTextureColour = texture2D(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColour = texture2D(rTexture,tiledCoords) * blendMapColour.r;
	vec4 gTextureColour = texture2D(gTexture,tiledCoords) * blendMapColour.g;
	vec4 bTextureColour = texture2D(bTexture,tiledCoords) * blendMapColour.b;
	
	vec4 totalColour = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i=0;i<4;i++){
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);	
		float nDotl = dot(unitNormal,unitLightVector);
		float brightness = max(nDotl,0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
	}
	totalDiffuse = max(totalDiffuse, 0.2);
	
	// Check to see if vertex is behind the plane if it is less than zero.
    // Then hide it.
    if (gl_ClipDistance0 < 0.0) {
        discard;
    }

	gl_FragColor =  vec4(totalDiffuse,1.0) * totalColour + vec4(totalSpecular,1.0);
	gl_FragColor = mix(vec4(skyColour,1.0),gl_FragColor, visibility);
} */