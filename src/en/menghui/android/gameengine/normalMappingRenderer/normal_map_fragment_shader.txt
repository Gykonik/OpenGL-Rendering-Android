varying vec2 pass_textureCoordinates;
// varying vec3 surfaceNormal;
varying vec3 toLightVector[4];
varying vec3 toCameraVector;
varying float visibility;

varying float gl_ClipDistance0;

uniform sampler2D modelTexture;
uniform sampler2D normalMap;
uniform sampler2D specularMap;
uniform float usesSpecularMap;
uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){
    vec4 normalMapValue = 2.0 * texture2D(normalMap, pass_textureCoordinates) - 1.0;

    vec3 unitNormal = normalize(normalMapValue.rgb);
	vec3 unitVectorToCamera = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < 4; i++){
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);	
		float nDotl = dot(unitNormal, unitLightVector);
		float brightness = max(nDotl, 0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColour[i]) / attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i]) / attFactor;
	}
	totalDiffuse = max(totalDiffuse, 0.2);
	
	vec4 textureColour = texture2D(modelTexture, pass_textureCoordinates);
	if(textureColour.a < 0.5){
		discard;
	}
	
	if (usesSpecularMap > 0.5) {
        vec4 mapInfo = texture2D(specularMap, pass_textureCoordinates);
        totalSpecular *= mapInfo.r;
        
        if (mapInfo.g > 0.5) {
            totalDiffuse = vec3(1.0);
        }
    }
	
	// Check to see if vertex is behind the plane if it is less than zero.
    // Then hide it.
    if (gl_ClipDistance0 < 0.0) {
        discard;
    }

	gl_FragColor =  vec4(totalDiffuse, 1.0) * textureColour + vec4(totalSpecular, 1.0);
	gl_FragColor = mix(vec4(skyColour, 1.0), gl_FragColor, visibility);
}